import streamlit as st
from datetime import datetime
from fpdf import FPDF
import firebase_admin
from firebase_admin import credentials, db
from fpdf import FPDF

# Initialize Firebase
st.set_page_config(layout="wide", initial_sidebar_state="collapsed")
# Navbar HTML
navbar_html = '''
<style>
    .st-emotion-cache-12fmjuu{
        z-index: 100;
    }
    .st-emotion-cache-h4xjwg{
        z-index: 100;
    }
    .css-hi6a2p {padding-top: 0rem;}
    .navbar {
        background-color: #003FDD;
        padding: 0.3rem;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        z-index: 1000;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .navbar .logo {
        display: flex;
        align-items: center;
    }
    .navbar .logo img {
        height: 40px;
        margin-right: 10px;
    }
    .navbar .menu {
        display: flex;
        gap: 1.5rem;
    }
    .navbar .menu a {
        color: white;
        font-size: 1.2rem;
        text-decoration: none;
    }
    .content {
        padding-top: 5rem;  /* Adjust this based on navbar height */
    }
</style>

<nav class="navbar">
    <div class="logo">
<svg width="200" height="70" viewBox="0 0 535 200" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="535" height="200" rx="35" fill="white"/>
<path d="M208.921 121.365C207.222 121.365 205.433 121.213 203.552 120.91C201.671 120.607 200.246 120.243 199.275 119.818V111.901C200.185 112.265 201.338 112.568 202.733 112.811C204.189 113.054 205.554 113.175 206.828 113.175C213.077 113.175 216.201 110.142 216.201 104.075V56.391H225.483V104.712C225.483 109.929 223.997 114.024 221.024 116.997C218.051 119.909 214.017 121.365 208.921 121.365ZM252.514 121.365C247.236 121.365 242.99 120.03 239.774 117.361C236.62 114.631 235.042 110.961 235.042 106.35C235.042 101.497 236.559 97.7657 239.592 95.157C242.686 92.4877 247.054 91.153 252.696 91.153C258.702 91.153 263.798 92.3663 267.984 94.793V92.518C267.984 89.06 266.923 86.512 264.799 84.874C262.737 83.1753 259.461 82.326 254.971 82.326C252.302 82.326 249.693 82.599 247.145 83.145C244.658 83.6303 242.413 84.328 240.411 85.238V77.776C242.231 76.9267 244.597 76.2593 247.509 75.774C250.421 75.228 253.242 74.955 255.972 74.955C263.192 74.955 268.53 76.5627 271.988 79.778C275.507 82.9327 277.266 87.331 277.266 92.973V120H268.621V115.086C266.741 117.149 264.496 118.726 261.887 119.818C259.339 120.849 256.215 121.365 252.514 121.365ZM254.789 114.358C257.701 114.358 260.34 113.782 262.706 112.629C265.072 111.476 266.832 109.869 267.984 107.806V101.891C264.041 99.343 259.643 98.069 254.789 98.069C251.271 98.069 248.632 98.7667 246.872 100.162C245.174 101.497 244.324 103.559 244.324 106.35C244.324 111.689 247.813 114.358 254.789 114.358ZM288.672 52.751H297.863V120H288.672V52.751ZM330.845 121.365C326.477 121.365 322.534 120.425 319.015 118.544C315.557 116.603 312.827 113.903 310.825 110.445C308.884 106.926 307.913 102.862 307.913 98.251C307.913 93.701 308.884 89.6667 310.825 86.148C312.827 82.6293 315.557 79.8993 319.015 77.958C322.534 75.956 326.477 74.955 330.845 74.955C338.732 74.955 344.708 77.3513 348.772 82.144V52.751H357.963V120H349.045V113.63C346.619 116.299 343.949 118.271 341.037 119.545C338.186 120.758 334.789 121.365 330.845 121.365ZM332.938 114.085C336.7 114.085 339.976 113.114 342.766 111.173C345.618 109.171 347.62 106.502 348.772 103.165V93.337C347.741 90.0003 345.769 87.331 342.857 85.329C340.006 83.327 336.7 82.326 332.938 82.326C329.966 82.326 327.266 82.9933 324.839 84.328C322.473 85.6627 320.593 87.5433 319.197 89.97C317.863 92.3967 317.195 95.157 317.195 98.251C317.195 101.345 317.863 104.105 319.197 106.532C320.593 108.959 322.473 110.839 324.839 112.174C327.266 113.448 329.966 114.085 332.938 114.085ZM375.177 67.766C373.66 67.766 372.386 67.2503 371.355 66.219C370.323 65.1877 369.808 63.9137 369.808 62.397C369.808 60.8803 370.323 59.6063 371.355 58.575C372.386 57.5437 373.66 57.028 375.177 57.028C376.754 57.028 378.058 57.5437 379.09 58.575C380.182 59.6063 380.728 60.8803 380.728 62.397C380.728 63.9137 380.182 65.1877 379.09 66.219C378.058 67.2503 376.754 67.766 375.177 67.766ZM370.536 76.32H379.909V120H370.536V76.32ZM395.015 120C393.801 120 392.77 119.606 391.921 118.817C391.132 117.968 390.738 116.936 390.738 115.723C390.738 114.51 391.132 113.478 391.921 112.629C392.77 111.78 393.801 111.355 395.015 111.355C396.228 111.355 397.259 111.78 398.109 112.629C398.958 113.478 399.383 114.51 399.383 115.723C399.383 116.936 398.958 117.968 398.109 118.817C397.259 119.606 396.228 120 395.015 120ZM414.722 67.766C413.206 67.766 411.932 67.2503 410.9 66.219C409.869 65.1877 409.353 63.9137 409.353 62.397C409.353 60.8803 409.869 59.6063 410.9 58.575C411.932 57.5437 413.206 57.028 414.722 57.028C416.3 57.028 417.604 57.5437 418.635 58.575C419.727 59.6063 420.273 60.8803 420.273 62.397C420.273 63.9137 419.727 65.1877 418.635 66.219C417.604 67.2503 416.3 67.766 414.722 67.766ZM410.081 76.32H419.454V120H410.081V76.32ZM432.103 76.32H441.021V82.599C443.084 79.9903 445.602 78.0793 448.574 76.866C451.608 75.592 454.762 74.955 458.038 74.955C463.862 74.955 468.2 76.502 471.051 79.596C473.903 82.69 475.328 86.8457 475.328 92.063V120H466.137V92.973C466.137 85.875 462.74 82.326 455.945 82.326C453.033 82.326 450.303 83.0237 447.755 84.419C445.268 85.7537 443.114 87.8163 441.294 90.607V120H432.103V76.32Z" fill="black"/>
<path d="M204.567 132.923H206.246L212.663 149H210.823L209.098 144.699H201.692L199.99 149H198.15L204.567 132.923ZM208.592 143.181L205.395 134.993L202.221 143.181H208.592ZM215.433 137.96H217.158V139.616C217.695 138.926 218.347 138.42 219.113 138.098C219.895 137.776 220.723 137.615 221.597 137.615C223.054 137.615 224.135 137.998 224.84 138.765C225.561 139.532 225.921 140.559 225.921 141.847V149H224.15V142.008C224.15 141.057 223.92 140.329 223.46 139.823C223 139.302 222.264 139.041 221.252 139.041C219.55 139.041 218.201 139.808 217.204 141.341V149H215.433V137.96ZM237.782 132.923H239.576V149H237.782V132.923ZM242.813 137.96H244.538V139.616C245.075 138.926 245.726 138.42 246.493 138.098C247.275 137.776 248.103 137.615 248.977 137.615C250.434 137.615 251.515 137.998 252.22 138.765C252.941 139.532 253.301 140.559 253.301 141.847V149H251.53V142.008C251.53 141.057 251.3 140.329 250.84 139.823C250.38 139.302 249.644 139.041 248.632 139.041C246.93 139.041 245.581 139.808 244.584 141.341V149H242.813V137.96ZM257.506 135.568C257.199 135.568 256.939 135.461 256.724 135.246C256.509 135.031 256.402 134.771 256.402 134.464C256.402 134.157 256.509 133.897 256.724 133.682C256.939 133.467 257.199 133.36 257.506 133.36C257.813 133.36 258.073 133.467 258.288 133.682C258.518 133.897 258.633 134.157 258.633 134.464C258.633 134.771 258.518 135.031 258.288 135.246C258.073 135.461 257.813 135.568 257.506 135.568ZM256.632 137.96H258.403V149H256.632V137.96ZM265.954 149.345C264.911 149.345 264.099 149.038 263.516 148.425C262.949 147.812 262.665 146.938 262.665 145.803V139.34H260.94V137.96H262.665V134.648H264.436V137.96H267.219V139.34H264.436V145.849C264.436 146.616 264.589 147.16 264.896 147.482C265.203 147.789 265.762 147.942 266.575 147.942C266.974 147.942 267.395 147.85 267.84 147.666V149.115C267.334 149.268 266.705 149.345 265.954 149.345ZM271.364 135.568C271.058 135.568 270.797 135.461 270.582 135.246C270.368 135.031 270.26 134.771 270.26 134.464C270.26 134.157 270.368 133.897 270.582 133.682C270.797 133.467 271.058 133.36 271.364 133.36C271.671 133.36 271.932 133.467 272.146 133.682C272.376 133.897 272.491 134.157 272.491 134.464C272.491 134.771 272.376 135.031 272.146 135.246C271.932 135.461 271.671 135.568 271.364 135.568ZM270.49 137.96H272.261V149H270.49V137.96ZM279.582 149.345C278.248 149.345 277.19 149.015 276.408 148.356C275.642 147.681 275.258 146.761 275.258 145.596C275.258 144.385 275.634 143.457 276.385 142.813C277.137 142.154 278.225 141.824 279.651 141.824C281.246 141.824 282.618 142.154 283.768 142.813V141.985C283.768 140.988 283.485 140.252 282.917 139.777C282.35 139.286 281.453 139.041 280.226 139.041C278.923 139.041 277.719 139.286 276.615 139.777V138.282C277.075 138.083 277.658 137.922 278.363 137.799C279.069 137.676 279.743 137.615 280.387 137.615C282.135 137.615 283.431 138.014 284.274 138.811C285.118 139.593 285.539 140.682 285.539 142.077V149H283.883V147.574C282.917 148.755 281.484 149.345 279.582 149.345ZM280.019 147.896C280.847 147.896 281.591 147.735 282.25 147.413C282.925 147.076 283.431 146.608 283.768 146.01V144.239C283.17 143.886 282.572 143.633 281.974 143.48C281.392 143.311 280.732 143.227 279.996 143.227C278.954 143.227 278.195 143.426 277.719 143.825C277.259 144.208 277.029 144.799 277.029 145.596C277.029 147.129 278.026 147.896 280.019 147.896ZM292.143 149.345C291.101 149.345 290.288 149.038 289.705 148.425C289.138 147.812 288.854 146.938 288.854 145.803V139.34H287.129V137.96H288.854V134.648H290.625V137.96H293.408V139.34H290.625V145.849C290.625 146.616 290.779 147.16 291.085 147.482C291.392 147.789 291.952 147.942 292.764 147.942C293.163 147.942 293.585 147.85 294.029 147.666V149.115C293.523 149.268 292.895 149.345 292.143 149.345ZM297.554 135.568C297.247 135.568 296.987 135.461 296.772 135.246C296.557 135.031 296.45 134.771 296.45 134.464C296.45 134.157 296.557 133.897 296.772 133.682C296.987 133.467 297.247 133.36 297.554 133.36C297.861 133.36 298.121 133.467 298.336 133.682C298.566 133.897 298.681 134.157 298.681 134.464C298.681 134.771 298.566 135.031 298.336 135.246C298.121 135.461 297.861 135.568 297.554 135.568ZM296.68 137.96H298.451V149H296.68V137.96ZM301.448 137.96H303.334L306.83 146.815L310.326 137.96H312.235L307.75 149H305.91L301.448 137.96ZM320.016 149.345C318.007 149.345 316.435 148.831 315.301 147.804C314.181 146.777 313.622 145.343 313.622 143.503C313.622 141.694 314.128 140.26 315.14 139.202C316.152 138.144 317.593 137.615 319.464 137.615C320.721 137.615 321.787 137.86 322.661 138.351C323.535 138.826 324.194 139.486 324.639 140.329C325.083 141.172 325.306 142.131 325.306 143.204V144.17H315.278C315.339 145.427 315.799 146.37 316.658 146.999C317.532 147.628 318.712 147.942 320.2 147.942C320.92 147.942 321.626 147.881 322.316 147.758C323.021 147.62 323.65 147.436 324.202 147.206V148.701C323.742 148.885 323.113 149.038 322.316 149.161C321.534 149.284 320.767 149.345 320.016 149.345ZM323.65 142.905C323.619 141.709 323.251 140.766 322.546 140.076C321.84 139.386 320.805 139.041 319.441 139.041C318.107 139.041 317.087 139.401 316.382 140.122C315.676 140.827 315.308 141.755 315.278 142.905H323.65ZM343.367 149.345C342.309 149.345 341.381 149.161 340.584 148.793C339.802 148.41 339.12 147.835 338.537 147.068V149H336.812V132.003H338.583V139.823C339.058 139.102 339.725 138.558 340.584 138.19C341.443 137.807 342.37 137.615 343.367 137.615C344.456 137.615 345.437 137.86 346.311 138.351C347.2 138.842 347.89 139.539 348.381 140.444C348.887 141.333 349.14 142.353 349.14 143.503C349.14 144.668 348.887 145.696 348.381 146.585C347.875 147.474 347.185 148.157 346.311 148.632C345.437 149.107 344.456 149.345 343.367 149.345ZM342.999 147.942C343.812 147.942 344.548 147.758 345.207 147.39C345.882 147.022 346.411 146.501 346.794 145.826C347.177 145.151 347.369 144.377 347.369 143.503C347.369 142.629 347.177 141.855 346.794 141.18C346.411 140.505 345.882 139.984 345.207 139.616C344.548 139.233 343.812 139.041 342.999 139.041C341.956 139.041 341.029 139.317 340.216 139.869C339.419 140.421 338.874 141.172 338.583 142.123V144.883C338.89 145.834 339.434 146.585 340.216 147.137C341.013 147.674 341.941 147.942 342.999 147.942ZM352.471 153.554C351.766 153.554 351.137 153.485 350.585 153.347V151.921C350.754 151.982 350.991 152.036 351.298 152.082C351.62 152.128 351.888 152.151 352.103 152.151C352.624 152.151 353.046 152.013 353.368 151.737C353.69 151.461 353.981 151.001 354.242 150.357L354.84 148.931L349.941 137.96H351.827L355.783 146.884L359.44 137.96H361.326L356.22 150.472C355.791 151.53 355.285 152.304 354.702 152.795C354.135 153.301 353.391 153.554 352.471 153.554ZM371.908 147.735L381.292 134.441H372.138V132.923H383.454V134.211L374.093 147.505H383.799V149H371.908V147.735ZM386.563 132.923H396.913V134.441H388.357V140.191H394.774V141.709H388.357V147.482H396.913V149H386.563V132.923ZM399.68 132.923H401.405L410.26 145.941V132.923H412.054V149H410.329L401.474 135.959V149H399.68V132.923ZM424.006 132.923H425.846L431.918 146.194L437.99 132.923H439.83V149H438.059V136.58L432.378 149H431.458L425.777 136.58V149H424.006V132.923ZM443.075 132.923H444.869V149H443.075V132.923ZM448.106 132.923H449.831L458.686 145.941V132.923H460.48V149H458.755L449.9 135.959V149H448.106V132.923ZM463.694 132.923H468.662C470.379 132.923 471.867 133.245 473.124 133.889C474.397 134.533 475.37 135.453 476.045 136.649C476.72 137.845 477.057 139.256 477.057 140.881C477.057 143.564 476.29 145.588 474.757 146.953C473.224 148.318 471.069 149 468.294 149H463.694V132.923ZM468.179 147.482C470.602 147.482 472.388 146.93 473.538 145.826C474.688 144.707 475.263 143.058 475.263 140.881C475.263 138.857 474.703 137.278 473.584 136.143C472.465 135.008 470.816 134.441 468.639 134.441H465.488V147.482H468.179ZM483.066 149.345C482.176 149.345 481.302 149.268 480.444 149.115C479.585 148.962 478.88 148.755 478.328 148.494V146.792C479.769 147.421 481.318 147.735 482.974 147.735C484.354 147.735 485.366 147.513 486.01 147.068C486.669 146.623 486.999 145.956 486.999 145.067C486.999 144.438 486.861 143.94 486.585 143.572C486.324 143.204 485.941 142.897 485.435 142.652C484.929 142.391 484.055 142.008 482.813 141.502C481.295 140.889 480.191 140.222 479.501 139.501C478.826 138.765 478.489 137.837 478.489 136.718C478.489 135.905 478.703 135.185 479.133 134.556C479.577 133.927 480.198 133.444 480.996 133.107C481.793 132.754 482.713 132.578 483.756 132.578C484.599 132.578 485.358 132.647 486.033 132.785C486.723 132.908 487.397 133.115 488.057 133.406V135.039C486.769 134.472 485.419 134.188 484.009 134.188C482.782 134.188 481.854 134.41 481.226 134.855C480.597 135.3 480.283 135.921 480.283 136.718C480.283 137.255 480.413 137.715 480.674 138.098C480.934 138.481 481.341 138.834 481.893 139.156C482.46 139.478 483.234 139.831 484.216 140.214C485.32 140.643 486.186 141.05 486.815 141.433C487.443 141.801 487.926 142.276 488.264 142.859C488.616 143.426 488.793 144.162 488.793 145.067C488.793 146.432 488.31 147.49 487.344 148.241C486.378 148.977 484.952 149.345 483.066 149.345Z" fill="#1D0505" fill-opacity="0.72"/>
<path d="M71.9425 109C79.737 109 81.2435 117 93.754 117C106.527 117 107.444 109 115.566 109C123.36 109 124.867 117 137.377 117C150.15 117 151.067 109 159.189 109C166.983 109 168.359 116.84 180.869 117V101C173.075 101 171.568 93 159.058 93C146.285 93 145.368 101 137.246 101C129.451 101 127.945 93 115.435 93C102.662 93 101.745 101 93.623 101C85.8285 101 84.322 93 71.8115 93C59.039 93 58.122 101 50 101V117C62.445 117 64.2135 109 71.9425 109ZM159.189 125C146.416 125 145.499 133 137.377 133C129.583 133 128.076 125 115.566 125C102.793 125 101.811 133 93.6885 133C85.5665 133 84.6495 125 71.877 125C59.1045 125 58.122 133 50 133V149C62.7725 149 63.8205 141 71.877 141C79.999 141 80.916 149 93.6885 149C106.461 149 107.444 141 115.566 141C123.36 141 124.867 149 137.377 149C150.084 149 151.067 141 159.189 141C166.983 141 168.49 149 181 149V133C172.878 133 171.961 125 159.189 125ZM71.9425 77C79.737 77 81.2435 85 93.754 85C106.527 85 107.444 77 115.566 77C123.36 77 124.867 85 137.377 85C150.15 85 151.067 77 159.189 77C166.983 77 168.359 84.84 180.869 85V69C173.075 69 171.568 61 159.058 61C146.285 61 145.368 69 137.246 69C129.451 69 127.945 61 115.435 61C102.662 61 101.745 69 93.623 69C85.8285 69 84.322 61 71.8115 61C59.039 61 58.122 69 50 69V85C62.445 85 64.2135 77 71.9425 77Z" fill="#003FDD"/>
</svg>
</nav>
'''
st.markdown(navbar_html, unsafe_allow_html=True)
st.sidebar.image("pages/logo_jaldi.png",width=200)
# User ID (Replace with dynamic logic)

m = st.markdown("""
            <style>
            div.stButton > button:first-child {
            background-color: #003FDD;
            color: white;
            width: 200px;
            margin-top: 20px;
            text-alingn: center;
            }
            </style>""", unsafe_allow_html=True)

m = st.markdown("""
            <style>
            summary {
            background-color: #003FDD;
            font-size: 16px;
            font-weight: bold;
            border-radius: 20px;
            color: white;
            width: 200px;
            text-alingn: center;
            }
                .stVerticalBlockBorderWrapper{
                    border: solid 2px #003FDD;
                }
            .st-emotion-cache-1puwf6r p {
            font-size: 18px;
            color: white;
            }
            </style>""", unsafe_allow_html=True)

a,b,c = st.columns([0.7,0.15,0.15])
st.markdown('''<hr style="border:solid 2px #003FDD;margin: 0em;">''',unsafe_allow_html=True)
with a:
    st.title("JJM Inventory Management")
with b:
    if st.button("Home Page"):
        st.switch_page("pages/admin_all.py")
with c:
    if st.button("Logout"):
        st.session_state={}
        st.switch_page("admin_login.py")

cred = credentials.Certificate("newjaldi-firebase-adminsdk-lpoc5-a2babade74.json")
try:
    firebase_admin.initialize_app(cred, {
        'databaseURL': 'https://newjaldi-default-rtdb.firebaseio.com/'
    })
except Exception as e:
    pass

# Firebase Database paths
inventory_ref = db.reference('Inventory')
logs_ref = db.reference('Logs')

# Utility functions
def load_inventory():
    try:
        inventory_data = inventory_ref.get()  # Retrieve inventory from Firebase
        if inventory_data:
            return inventory_data
        else:
            st.error("Inventory is empty in Firebase. Please add items.")
            return []
    except Exception as e:
        st.error(f"Failed to load inventory from Firebase: {str(e)}. Returning empty inventory.")
        return []

def save_inventory(data):
    try:
        inventory_ref.set(data)  # Save inventory data to Firebase
    except Exception as e:
        st.error(f"Failed to save inventory to Firebase: {str(e)}")

def log_activity(activity):
    try:
        logs_ref.push({
            'timestamp': datetime.now().isoformat(),
            'activity': activity
        })
    except Exception as e:
        st.error(f"Failed to log activity to Firebase: {str(e)}")

def load_logs():
    try:
        logs_data = logs_ref.get()  # Retrieve logs from Firebase
        if logs_data:
            return [f"{log['timestamp']} - {log['activity']}" for log in logs_data.values()]
        else:
            return []
    except Exception as e:
        st.error(f"Failed to load logs from Firebase: {str(e)}")
        return []

# PDF generation
def generate_pdf(content, filename="logs.pdf"):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    for line in content:
        pdf.cell(200, 10, txt=line, ln=True, align='L')
    pdf.output(filename)

# Streamlit UI

st.sidebar.title("Admin Options")
option = st.sidebar.selectbox("Choose an action:", ["View Inventory", "Add Item", "Update Stock", "Search Item", "Show Logs"])

inventory = load_inventory()

# Handle "View Inventory"
if option == "View Inventory":
    st.subheader("Inventory Overview")
    col1, col2 = st.columns(2)

    for i, item in enumerate(inventory):
        if isinstance(item, dict) and all(key in item for key in ["name", "product_id", "stock", "description"]):
            with (col1 if i % 2 == 0 else col2):
                with st.container(border=True):
                    st.subheader(f"{item['name']}\n")
                    st.markdown(f"**Description**: {item['description']}\n")
                    st.markdown(f"**Stock**: {item['stock']}\n")
                    st.markdown(f"**Product ID**: {item['product_id']}\n")
                    if st.button(f"Request ({item['name']})", key=f"req_{i}"):
                        qty = st.number_input(f"Enter quantity to request ({item['name']}):", min_value=1, step=1, key=f"qty_{i}")
                        if st.button(f"Confirm Request ({item['name']})", key=f"conf_{i}"):
                            if qty <= item['stock']:
                                item['stock'] -= qty
                                save_inventory(inventory)
                                log_activity(f"Requested {qty} of {item['name']} (Product ID: {item['product_id']})")
                                st.success(f"{qty} {item['name']} successfully requested!")
                            else:
                                st.error(f"Insufficient stock for {item['name']}")

# Handle "Add Item"
if option == "Add Item":
    st.subheader("Add New Inventory Item")
    name = st.text_input("Name")
    description = st.text_input("Description")
    product_id = st.text_input("Product ID")
    stock = st.number_input("Stock", min_value=1, step=1)

    if st.button("Add Item"):
        new_item = {"name": name, "description": description, "product_id": product_id, "stock": stock}
        inventory.append(new_item)
        save_inventory(inventory)
        log_activity(f"Added new item: {name} (Product ID: {product_id}, {stock} units)")
        st.success(f"{name} added to inventory!")

# Handle "Update Stock"
if option == "Update Stock":
    st.subheader("Update Stock")
    item_names = [item['name'] for item in inventory if isinstance(item, dict)]
    selected_item = st.selectbox("Select Item to Update:", item_names)

    if selected_item:
        item = next((i for i in inventory if i['name'] == selected_item), None)
        new_stock = st.number_input("New Stock:", min_value=0, step=1, value=item['stock'])

        if st.button("Update Stock"):
            item['stock'] = new_stock
            save_inventory(inventory)
            log_activity(f"Updated stock for {selected_item} (Product ID: {item['product_id']}) to {new_stock}")
            st.success(f"Stock for {selected_item} updated to {new_stock}!")

# Handle "Search Item"
if option == "Search Item":
    st.subheader("Search Inventory")
    query = st.text_input("Enter search term:")
    results = [item for item in inventory if query.lower() in item['name'].lower() or query.lower() in item['description'].lower()]

    if results:
        for item in results:
            with st.container(border=True):
                st.subheader(f"{item['name']}\n")
                st.markdown(f"**Product ID**: {item['product_id']}\n")
    else:
        st.warning("No matching items found.")

# Handle "Show Logs"
if option == "Show Logs":
    st.subheader("Activity Logs")
    logs = load_logs()

    for log in logs:
        st.write(log)

    if st.button("Download Logs as PDF"):
        generate_pdf(logs)
        with open("logs.pdf", "rb") as f:
            st.download_button(label="Download PDF", data=f, file_name="logs.pdf", mime="application/pdf")

# Add an option to reset inventory if needed
if st.sidebar.button("Reset Inventory"):
    inventory_ref.set([])  # Clear inventory in Firebase
    st.success("Inventory has been reset.")
